#!/usr/bin/env bash
#
# Usage: build_and_install <os> <arch>
#   <os>:   macosx only for now.
#   <arch>: x86 or x86_64
#

osName=$1
arch=$2

if [ "$osName" != "macosx" ]; then
    echo "Invalid OS name, must be 'macosx'.
    exit 1
fi

if [ "$arch" == "x86" ]; then
    ADD_CFLAGS=-m32
    ALT_QT_INC_DIR=/Library/Frameworks/
elif [ "$arch" == "x86_64" ]; then
    ADD_CFLAGS=-m64
    ALT_QT_INC_DIR=/Users/builder/packages/Qt-4.7-64/
    QT_SDK_HOME="$HOME/packages/PyQt-4.7-64"
else
    echo "Invalid architecture, must be 'x86' and 'x86_64'.
    exit 1
fi

alldirs=("shiboken" "pyside" "pyside-tools")

dirs=("${alldirs[@]}")

for d in "${dirs[@]}" ; do
    rm -rf "$d/build"
    mkdir -p "$d/build"
    (
        source environment.sh

        if [ "`uname -s`" == "Darwin" ]; then
            # When running on Mac OS X, we need to specify the
            # Qt include dir for the header files to be found.
            echo "$0: Mac OS X detected (uname -s gave 'Darwin')."
            PYSIDE_BS_CMAKE_FLAGS="-DALTERNATIVE_QT_INCLUDE_DIR=$ALT_QT_INC_DIR"
        else
            # On Non-OS X builds, we enable this to fix a gcc bug
            PYSIDE_BS_CMAKE_FLAGS="-DENABLE_GCC_OPTIMIZATION=On"
        fi

        cd "$d/build"
        cmake .. -DCMAKE_INSTALL_PREFIX=$PYSIDESANDBOXPATH \
                 -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
                 -DCMAKE_SKIP_RPATH=0 \
                 -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=1 \
                 -DCMAKE_INSTALL_RPATH="@executable_path/../lib" \
                 -DQT_QTUITOOLS_INCLUDE_DIR=$QT_QTUITOOLS_INCLUDE_DIR \
                 -DENABLE_ICECC=0 -DCMAKE_CXX_FLAGS=$ADD_CFLAGS \
                 $PYSIDE_BS_CMAKE_FLAGS \
            && make -j4 && make install || exit 1
    ) || exit 1

    # If you are experiencing problems on OS X, uncomment the
    # following line to update the run-time linker cache:
    # sudo ldconfig
done


# On Mac OS and Linux we need to fix the RPATH to make the references to libpyside and libshiboken relative
# to the executable so we don't have to (DY)LD_LIBRARY_PATH.
eggdir=build/lib/python2.7/site-packages/PySide
if [ "`uname -s`" == "Darwin" ]; then
    echo "Fixing shared-library load paths..."
    for so in $eggdir/*.so build/lib/libpyside-*.dylib build/lib/libshiboken-*.dylib
    do
        install_name_tool -change "libpyside-python2.7.1.1.dylib" "@executable_path/../lib/libpyside-python2.7.1.1.dylib" $so
        install_name_tool -change "libshiboken-python2.7.1.1.dylib" @executable_path/../lib/libshiboken-python2.7.1.1.dylib $so
        for qt in Core Gui Network WebKit Script ScriptTools Svg Sql XmlPatterns OpenGL Declarative Designer DesignerComponents Help Multimedia Test Xml XmlPatterns
        do
            install_name_tool -change "Qt$qt.framework/Versions/4/Qt$qt" @executable_path/../Frameworks/Qt$qt.framework/Versions/4/Qt$qt $so
        done
    done
fi
